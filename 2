#include<iostream>
#include<stdio.h>
#include<math.h>
#include<iomanip>
#include<ctime>
using namespace std;

double Delta(double, double);
double otnDelta(double, double);



void main()
{
    setlocale(LC_ALL, "RUS");

    /* Вычислить и вывести на экран в виде таблицы значения функции за -
    данной с помощью ряда Тейлора на интервале от хn до xk с шагом dx.

    Реализовать два цикла вычисления значений функции : f1(x) - для вычис -
    ления ряда с заданной точностью ε1 = 0.1 и f2(x) - для вычисления ряда с за -
    данной точностью ε2 = 0.000001.

    Каждая строка таблицы должна содержать значение аргумента, значение
    заданной f(x), точность eps1, значение функции f1(x), точность eps2, значение
    функции f2(x)

    Оценить скорость сходимости ряда, найдя число слагаемых, необходи -
    мое для достижения каждой из заданных погрешностей.*/

    int n, k;
    double xn, xk, dx, an, S1, S2, eps1 = 0.1, eps2 = 0.000001, f;
    cout << "Задание 1.11" << endl;
    cout << "Введите значение xn=" ;
    cin >> xn;
    cout << "Введите значение xk=" ;
    cin >> xk;
    cout << "Введите значение dx=" ;
    cin >> dx;
    cout <<  "|" << setw(10) << "x" << setw(10) << "|" << setw(10) << "eps1" << setw(10) << "|" << setw(10) << "S1" << setw(10) << "|" << setw(10) << "eps2" << setw(10) << "|" << setw(10) << "S2" << setw(10) << "|" << setw(10) << "f" << setw(10) << "|" << endl;
    for (double x = xn; x <= xk + dx / 2.; x += dx)
    {
        n = 1;
        S1 = 0.;
        an = x;
        while (fabs(an) > eps1)
        {
            S1 += an;
            an *= -(pow(x, 2) / (2 * n * (2 * n + 1)));
            n++;
        }

        k = 1;
        S2 = 0.;
        an = x;
        while (fabs(an) > eps2)
        {
            S2 += an;
            an *= -(pow(x, 2) / (2 * k * (2 * k + 1)));
            k++;
        }
        f = sin(x);

        //лучше всегда писать функции 
       
        printf("    %.2f    ", x);
        printf("    %.1f    ", eps1);
        printf("     %.2f    ", S1);
        printf("   %.6f    ", eps2);
        printf("    %.2f    ", S2);
        printf("   %lf   ", f);
        printf("\n");
    }

    puts("Задание 2");


    //в 3 выводим промежуточные значения

}



double Delta(double x, double delx)
{
    double delta = 0;
    delta = fabs(x - delx);
    return delta;

}
double otnDelta(double x, double delx)
{
    double res, otndelta;
    res = Delta(x, delx);
    otndelta = (res / fabs(delx) * 100);
    return otndelta;
}
